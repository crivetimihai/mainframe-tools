/* rexx */

/* ----------------------------------------------------------------- */
/* Author: Mihai Criveti [Z31563] twitter: @CrivetiMihai             */
/*   Info: ReXX Markdown report generator for MTM 2018               */
/*  Scope: Document key mainframe subsystems and commands            */
/*         parsing reports generated by other commands and running   */
/*         UNIX syscalls to obtain data.                             */
/* Output: Creates a report in `P3.OUTPUT(#15)`                      */
/*   Exec: Type the `ex` line command in the `dslist` ISPF screen    */
/* ----------------------------------------------------------------- */


/* ----------------------------------------------------------------- */
/* SETTINGS                                                          */
/* ----------------------------------------------------------------- */
/* Report files */
file_r00  = "CH15.OUTPUT(R00)"
file_r01  = "CH15.OUTPUT(R01)"

/* Output */
file_out  = "P3.OUTPUT(#15)"

/* Environment: */
/* SSLTBW_2.3.0/com.ibm.zos.v2r3.ikja300/mvsvarr.htm*/
z_name    = mvsvar('SYSNAME')
z_level   = mvsvar('SYSOPSYS')
z_sms     = mvsvar('SYSSMS')
z_user    = USERID()
z_time    = time()
z_date    = date()
z_ip      = get_ip()

/* Settings */
line      = 0
rpt_id    = "Report created by Rexx routine Z31563.CH15.SOURCE(R00#15)"
doc_root  = "https://www.ibm.com/support/knowledgecenter/en/"

/* Clear the screen */
clrscn

/* ----------------------------------------------------------------- */
/* CALL CODE                                                         */
/* ----------------------------------------------------------------- */
call read_r00
call read_r01
call open_output
call generate_report
call write_output
call display_output
exit 0


/* ----------------------------------------------------------------- */
/* GENERATE REPORT                                                   */
/* Flow: 1. Header 2. System INfo (Environment)*/
/* 3. TSO Commands 3. DISPLAY commands / console commands */
/* 5. parse output from SDSF and other places */
/* z/OS commands, JES2, SDSF, TSO, DATA */
/* ----------------------------------------------------------------- */
generate_report:
    /* Headers */
    call h1 "Master the Mainframe 2018"
    call note rpt_id
    call note "at " z_date z_time
    call note "Author: Mihai Criveti @CrivetiMihai " z_user
    call note "MTM2018: Markdown Report Generator in ReXX"

    /* Part 1: System Info */
    call h2 "Part 1: System Information"
    call h3 "System Information from MSSVAR"
    call bullet "SYSNAME / SYSOPSYS:" z_name z_level

    call h3 "IPLINFO displays when the system was IPLed:"
    call bullet "IPL DATE / TIME:" ipl_date ipl_time
    call bullet ipl_line

    call h3 "Network configuration"
    call bullet "IP Address: " z_ip

    /* Part 2: Parsed files */
    call h3 "Part 2: Parsing JCL output"
    call bullet ipl_time
    call bullet ipl_date

    /* Part 3: Unix syscalls */
    call h2 "Part 3: Unix Syscalls"
    call bullet "UNIX version: " unix_version()

    /* Additional Reports */
    call h1 "Additional reports about z/OS contest system:"
    call bullet "R01#15: UNIX syscalls - list files in home directory"
    call bullet "R02#15: UNIX syscalls - get UNIX version (uname)"
    call bullet "R03#15: Storage and system catalog test"
    call bullet "R03#15: ISPF PANEL"
    return


/* ----------------------------------------------------------------- */
/* INTPUT                                                            */
/* ----------------------------------------------------------------- */
/* READ REPORT R00 */
read_r00:
    "allocate dataset("file_r00") fi(rpt) shr reuse"
    "execio * diskr rpt (stem rpt. finis)"
    do i=1 to rpt.0
        parse var rpt.i w1 w2 w3 w4 w5 w6 w7

        if w1 = 'SYSTEM' & w2 = 'IPLED' then
        do
            ipl_line = rpt.i
            ipl_time = w4
            ipl_date = w6
        end
    end
    "free fi(rpt)"
    return

/* READ REPORT R01 */
read_r01:
    "allocate dataset("file_r01") fi(rpt) shr reuse"
    "execio * diskr rpt (stem rpt. finis)"
    do i=1 to rpt.0
        parse var rpt.i w1 w2 w3 w4 w5 w6 w7

        if w1 = 'SYSTEM' & w2 = 'IPLED' then
        do
            ipl_line = rpt.i
            ipl_time = w4
            ipl_date = w6
        end
    end
    "free fi(rpt)"
    return


/* ----------------------------------------------------------------- */
/* OUTPUT                                                            */
/* ----------------------------------------------------------------- */
/* OPEN OUTPUT */
open_output:
    "allocate dataset("file_out") fi(#15) shr reuse"
    "execio 0 diskw #15 (stem o. open)"
    return

/* WRITE OUTPUT */
write_output:
    "execio * diskw #15 (stem o. finis)"
    "free fi(#15)"
    return

/* DISPLAY OUTPUT */
display_output:
    do i = 1 to line
        say o.i
    end


/* ----------------------------------------------------------------- */
/* UNIX SYSCALLS                                                     */
/* ----------------------------------------------------------------- */
unix_version:
    call syscalls 'ON'
    address syscall
    'uname uname.'
    os_version = uname.1 uname.2 uname.3 uname.4
    return os_version


/* ----------------------------------------------------------------- */
/* NETWORK SETTINGS                                                  */
/* ----------------------------------------------------------------- */
get_ip:
    n = outtrap("net",4)
    netstat home
    parse var net3 net3_word1 net3_word2 net3_word3
    parse var net4 net4_word1 net4_word2 net4_word3
    return net4_word2


/* ----------------------------------------------------------------- */
/* Markdown Formatting                                               */
/* ----------------------------------------------------------------- */
/* Heading 1 (#) */
h1:
    PARSE ARG input_text
    o.line = ' '
    line = line + 1
    o.line = '#' input_text
    line = line + 1
    return

/* Heading 2 (##) */
h2:
    PARSE ARG input_text
    o.line = ' '
    line = line + 1
    o.line = '##' input_text
    line = line + 1
    return

/* Heading 3 (###) */
h3:
    PARSE ARG input_text
    o.line = ' '
    line = line + 1
    o.line = '###' input_text
    line = line + 1
    return

/* Notes (>) */
note:
    PARSE ARG input_text
    o.line = '>' input_text
    line = line + 1
    return

/* Code blocks (```) */
code:
    PARSE ARG input_text
    o.line = '  ' input_text
    line = line + 1
    o.line = ' '
    line = line + 1
    return

/* Bullets (-) */
bullet:
    PARSE ARG input_text
    o.line = '-' input_text
    line = line + 1
    return


